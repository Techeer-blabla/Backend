name: CI

on:
  push:
    branches:
      - 'fe/**'  # fe/로 시작하는 모든 브랜치에 대해 푸시 이벤트 트리거
  pull_request:
    branches:
      - main
      - develop
    # 주의: pull_request 이벤트의 branches는 타겟 브랜치를 의미합니다.
    # 따라서 소스 브랜치가 fe/** 인지를 별도로 확인해야 합니다.

jobs:
  build:
    runs-on: ubuntu-latest

    # GitHub Actions의 매트릭스 전략을 통해 여러 Node.js 버전에서 테스트 실행
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    # job 레벨에서 조건을 추가하여 소스 브랜치가 fe/로 시작하는 경우에만 실행
    if: startsWith(github.head_ref, 'fe/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'  # Yarn 캐싱 활성화

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint
        # ESLint 스크립트가 package.json에 정의되어 있지 않다면 다음과 같이 실행할 수 있습니다:
        # run: yarn eslint 'src/**/*.{js,jsx,ts,tsx}'

      - name: Type Check
        run: yarn type-check
        # package.json에 "type-check": "tsc --noEmit" 스크립트가 정의되어 있어야 합니다.

      - name: Run Tests
        run: yarn test --coverage
        # 테스트 스크립트가 package.json에 정의되어 있어야 합니다.

      - name: Build
        run: yarn build
        # 빌드 스크립트가 package.json에 정의되어 있어야 합니다.

      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/
